{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sticky-fi",
  "type": "registry:ui",
  "title": "sticky-fi",
  "description": "An animated component to make the desired componet attract to the cursor.",
  "files": [
    {
      "path": "src/components/ui/stickyIco.tsx",
      "content": "\"use client\";\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { cloneElement, ReactElement, Ref, useRef, useEffect } from \"react\";\n\ntype StickyProps = {\n    children: ReactElement<any>;\n    intensity?: number; // Controls how much the element follows the cursor\n    scale?: number; // How much the element scales on hover\n    rotation?: number; // Maximum rotation in degrees\n    range?: number; // How far from the element the animation activates (multiplier)\n};\n\nfunction Sticky({ \n    children, \n    intensity = 0.15, \n    scale = 1.05, \n    rotation = 5,\n    range = 2 // Default to 1.5x the element size\n}: StickyProps) {\n    const stickyRef = useRef<HTMLElement | null>(null);\n\n    useEffect(() => {\n        const el = stickyRef.current;\n        if (!el) return;\n\n        const xTo = gsap.quickTo(el, \"x\", {\n          scale: scale,\n          duration: 0.3,\n          ease: \"power2.out\",\n        });\n        const yTo = gsap.quickTo(el, \"y\", {\n          scale: scale,\n          duration: 0.3,\n          ease: \"power2.out\",\n        });\n        const rotateTo = gsap.quickTo(el, \"rotation\", {\n          duration: 0.3,\n          ease: \"power2.out\",\n        });\n\n        const mouseMove = (e: MouseEvent) => {\n            const { height, width, left, top } = el.getBoundingClientRect();\n            const { clientX, clientY } = e;\n            \n            // Calculate extended boundaries\n            const extendedWidth = width * range;\n            const extendedHeight = height * range;\n            const centerX = left + width / 2;\n            const centerY = top + height / 2;\n            \n            // Check if mouse is within extended range\n            const inRange = \n                clientX > centerX - extendedWidth/2 && \n                clientX < centerX + extendedWidth/2 && \n                clientY > centerY - extendedHeight/2 && \n                clientY < centerY + extendedHeight/2;\n            \n            if (inRange) {\n                const x = (clientX - centerX) * intensity;\n                const y = (clientY - centerY) * intensity;\n                \n                // Calculate rotation based on mouse position\n                const rotateX = (y / height) * -rotation;\n                const rotateY = (x / width) * rotation;\n\n                xTo(x);\n                yTo(y);\n                rotateTo(rotateY); // Apply rotation\n                \n                // Optional scale effect\n                gsap.to(el, { scale: scale, duration: 0.3 });\n            } else {\n                // Reset when out of range\n                xTo(0);\n                yTo(0);\n                rotateTo(0);\n                gsap.to(el, { scale: 1, duration: 0.3 });\n            }\n        };\n        \n        // Add event listener to document instead of just the element\n        document.addEventListener(\"mousemove\", mouseMove);\n\n        return () => {\n            document.removeEventListener(\"mousemove\", mouseMove);\n        };\n    }, [intensity, scale, rotation, range]);\n\n    return cloneElement(children, {\n        ref: stickyRef as unknown as Ref<any>,\n    });\n}\n\nexport default Sticky;\n",
      "type": "registry:ui"
    }
  ]
}